/*! dafmTodoList 14-04-2014 */
module.exports = function ( a ) {
    a.initConfig( {
        pkg: a.file.readJSON( "package.json" ),
        concat: {
            options: {
                separator: ";"
            },
            dist: {
                src: [ "**/*.js", "!node_modules/**/*.js", "!dist/**/*.js", "!app/assets/libs/**/*.js" ],
                dest: "dist/<%= pkg.name %>.js"
            }
        },
        uglify: {
            options: {
                banner: '/*! <%= pkg.name %> <%= grunt.template.today("dd-mm-yyyy") %> */\n'
            },
            dist: {
                files: {
                    "dist/<%= pkg.name %>.min.js": [ "<%= concat.dist.dest %>" ]
                }
            }
        },
        jshint: {
            server: [ "**/*.js", "!node_modules/**/*.js", "!dist/**/*.js", "!app/assets/libs/**/*.js" ],
            options: {
                node: !0,
                globals: {
                    jQuery: !0,
                    console: !0,
                    module: !0,
                    document: !0
                },
                "-W099": !0
            }
        },
        jsbeautifier: {
            all: {
                src: [ "**/**.js", "!node_modules/**", "!tools/grunt-template-jasmine-requirejs/**", "!test/jasmine/common/**", "!app/assets/scripts/libs/**/*.js" ],
                options: {
                    config: "config/js-beautify.json"
                }
            }
        },
        watch: {
            livereload: {
                options: {
                    livereload: !0
                },
                files: [ "<%= path %>/**/*.{css, js, html}" ]
            }
        },
        compass: {
            dist: {
                options: {
                    sassDir: "app/assets/styles/sass",
                    cssDir: "app/assets/styles",
                    raw: "preferred_syntax = :sass\n"
                }
            }
        },
        connect: {
            server: {
                options: {
                    port: 9e3,
                    base: "app/",
                    hostname: "localhost",
                    keepalive: !0,
                    livereload: !0
                }
            }
        },
        jasmine: {
            pivotal: {
                src: "app/assets/scripts/**/*.js",
                options: {
                    specs: "spec/*Spec.js",
                    helpers: "spec/*Helper.js"
                }
            }
        },
        protractor: {
            options: {
                configFile: "node_modules/protractor/referenceConf.js",
                keepAlive: !0,
                noColor: !1,
                args: {}
            },
            dafm: {
                options: {
                    configFile: "test/protractor.conf.js",
                    keepAlive: !0,
                    noColor: !1,
                    args: {}
                }
            }
        },
        karma: {
            unit: {
                configFile: "test/karma.conf.js",
                runnerPort: 9999,
                browsers: [ "Chrome" ]
            }
        }
    } ), a.loadNpmTasks( "grunt-contrib-uglify" ), a.loadNpmTasks( "grunt-contrib-jshint" ), a.loadNpmTasks( "grunt-contrib-watch" ), a.loadNpmTasks( "grunt-contrib-concat" ), a.loadNpmTasks( "grunt-contrib-compass" ), a.loadNpmTasks( "grunt-contrib-connect" ), a.loadNpmTasks( "grunt-jsbeautifier" ), a.loadNpmTasks( "grunt-contrib-jasmine" ), a.loadNpmTasks( "grunt-protractor-runner" ), a.loadNpmTasks( "grunt-karma" ), a.registerTask( "style", [ "compass" ] ), a.registerTask( "default", [ "jshint", "jsbeautifier:all", "concat", "uglify" ] ), a.registerTask( "server", [ "jsbeautifier:all", "jshint", "connect:server" ] )
};
var app = angular.module( "dafmContactList", [ "ngRoute", "ui.bootstrap" ] );
app.config( [ "$routeProvider",
    function ( a ) {
        a.when( "/", {
            controller: "ContactController",
            navTab: "home",
            templateUrl: "templates/contactList.html"
        } ).when( "/:status", {
            controller: "TodoCtrl",
            templateUrl: "todomvc-index.html"
        } ).otherwise( {
            redirectTo: "/"
        } )
    }
] ),
function () {
    var a = {
        app: "app",
        contactList: "controllers/contactList",
        angular: "libs/angular/angular.min",
        "angular-route": "libs/angular/angular-route.min",
        angularAMD: "libs/angular/angularAMD",
        jQuery: "libs/jQuery/jQuery-1.9.1",
        domReady: "libs/require/domReady"
    }, b = {
            angular: {
                deps: [ "jQuery" ],
                exports: "angular"
            },
            jQuery: {
                exports: "jQuery"
            },
            angularAMD: [ "angular" ],
            "angular-route": {
                deps: [ "angular" ],
                exports: "ngRoute"
            }
        };
    requirejs.config( {
        baseUrl: "assets/scripts/",
        paths: a,
        shim: b,
        deps: [ "app" ]
    } )
}(), app.controller( "ContactController", [ "ContactService", "$scope", "$modal",
    function ( a, b, c ) {
        b.list = a.getAllContacts(), b.editContact = function ( d ) {
            c.open( {
                templateUrl: "templates/editContact.html",
                controller: "EditUserController",
                resolve: {
                    contact: function () {
                        return d
                    }
                }
            } ).result.then( function ( c ) {
                a.edit( c.contact ), b.list = a.getAllContacts()
            } )
        }, b.newContact = function () {
            c.open( {
                templateUrl: "templates/editContact.html",
                controller: "NewUserController"
            } ).result.then( function ( c ) {
                a.add( c.contact ), b.list = a.getAllContacts()
            } )
        }, b.removeContact = function ( d ) {
            c.open( {
                templateUrl: "templates/removeContact.html",
                controller: "RemoveUserController",
                resolve: {
                    contact: function () {
                        return d
                    }
                }
            } ).result.then( function ( c ) {
                a.remove( c.contact ), b.list = a.getAllContacts()
            } )
        }
    }
] ), app.controller( "EditUserController", function ( a, b, c, d ) {
    b.title = "Edit Contact", b.contact = {
        id: d.id,
        name: d.name,
        phone: d.phone,
        address: d.address
    }, b.ok = function () {
        c.close( b )
    }, b.cancel = function () {
        c.dismiss( "cancel" )
    }
} ), app.controller( "NewUserController", function ( a, b, c ) {
    b.title = "Add Contact", b.contact = {
        id: "",
        name: "",
        phone: "",
        address: ""
    }, b.cancel = function () {
        c.dismiss( "cancel" )
    }, b.ok = function () {
        c.close( b )
    }
} ), app.controller( "RemoveUserController", function ( a, b, c, d ) {
    b.title = "Remove Contact", b.contact = {
        id: d.id,
        name: d.name,
        phone: d.phone,
        address: d.address
    }, b.cancel = function () {
        c.dismiss( "cancel" )
    }, b.ok = function () {
        c.close( b )
    }
} ), app.service( "ContactService", [ "$log",
    function () {
        return {
            add: function ( a ) {
                var b = this.getAllContacts();
                a.id = "id_" + ( new Date ).getTime(), b.push( a ), localStorage.dafmContactList = angular.toJson( b )
            },
            edit: function ( a ) {
                for ( var b = angular.fromJson( localStorage.dafmContactList ), c = b.length - 1; c >= 0; c-- ) b[ c ].id == a.id && ( b[ c ] = a );
                localStorage.dafmContactList = angular.toJson( b )
            },
            remove: function ( a ) {
                for ( var b = angular.fromJson( localStorage.dafmContactList ), c = b.length - 1; c >= 0; c-- ) b[ c ].id == a.id && b.splice( c, 1 );
                localStorage.dafmContactList = angular.toJson( b )
            },
            getAllContacts: function () {
                return localStorage.dafmContactList && "" !== localStorage.dafmContactList ? angular.fromJson( localStorage.dafmContactList ) : []
            }
        }
    }
] ), module.exports = function ( a ) {
    a.set( {
        basePath: "",
        frameworks: [ "jasmine" ],
        files: [],
        exclude: [],
        preprocessors: {},
        reporters: [ "progress" ],
        port: 9876,
        colors: !0,
        logLevel: a.LOG_INFO,
        autoWatch: !0,
        browsers: [ "Chrome" ],
        singleRun: !1
    } )
}, describe( "hello-test", function () {
    var a = progractor.getInstance();
    describe( "index", function () {
        it( "Should display the correct title", function () {
            a.get( "#/" ), expect( a.getTitle() ).toBe( "hello" )
        } )
    } )
} ), define( function () {
    return "hello"
} ), require( [ "hello", "world" ], function ( a, b ) {
    console.log( a, b )
} ), define( function () {
    return "world"
} ), exports.config = {
    specs: [ "./e2e/**/*.spec.js" ],
    chromeDriver: "../node_modules/protractor/selenium/chromedriver",
    baseUrl: "http://localhost:3333"
};
